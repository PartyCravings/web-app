<?php

namespace AppBundle\Repository;

use AppBundle\Utils\Sorter;
use Pagerfanta\Pagerfanta;
use AppBundle\Entity\Country;
use AppBundle\Entity\Category;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Gedmo\Tree\Entity\Repository\NestedTreeRepository
{
    const NUM_ITEMS = 20;

    public function findHeaderCategories(Country $country) :array
    {
        return $this->createQueryBuilder('p')
            ->where('p.parent = false')
            ->andWhere('l = true')
            ->andWhere('p.country = :country')
            ->andWhere('p.isEnabled = true')
            ->innerJoin('p.children', 'l')
            ->setParameter('country', $country)
            ->orderBy('p.title', 'DESC')
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true)
            ->getResult();
    }

    public function findAllByCountry($country, int $page) :Pagerfanta
    {
        $query = $this->createQueryBuilder('p')
            ->where('p.parent = false')
            ->andWhere('p.isEnabled =  true')
            ->andWhere('p.country = :country')
            ->setParameter('country', $country)
            ->orderBy('p.title', 'ASC')
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true);

        return Sorter::createPaginator($query, $page, self::NUM_ITEMS);
    }

    public function findAllByParent(Category $parent, int $page) :Pagerfanta
    {
        $query = $this->createQueryBuilder('p')
            ->where('p.isEnabled = true')
            ->andWhere('p.parent = :parent')
            ->setParameter('slug', $parent)
            ->orderBy('p.title', 'ASC')
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true);

        return Sorter::createPaginator($query, $page, self::NUM_ITEMS);
    }

    public function findBySlug(string $slug) :?Category
    {
        return $this->createQueryBuilder('p')
                ->andWhere('p.isEnabled = true')
                ->andWhere('p.slug = :slug')
                ->setParameter('slug', $slug)
                ->getQuery()
                ->useQueryCache(true)
                ->useResultCache(true)
                ->getOneOrNullResult();
    }
}
